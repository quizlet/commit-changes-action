{
  "plugins": ["jest", "@typescript-eslint"],
  "extends": [
    "airbnb-base",
    "plugin:jest/recommended",
    "plugin:jest/style",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "prettier",
    "prettier/@typescript-eslint", // Uses eslint-config-prettier to disable ESLint rules from @typescript-eslint/eslint-plugin that would conflict with prettier
    "plugin:prettier/recommended" // Enables eslint-plugin-prettier and eslint-config-prettier. This will display prettier errors as ESLint errors. Make sure this is always the last configuration in the extends array.],
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "project": "./tsconfig.lint.json"
  },
  "rules": {
    "no-plusplus": "off",
    "import/no-named": "off",
    "import/extensions": "off",
    "import/no-unresolved": "off",
    "import/prefer-default-export": "off",
    "consistent-return": "off", // doesn't play well with TypeScript
    "@typescript-eslint/explicit-module-boundary-types": "off", // implicit types are fine
    "@typescript-eslint/explicit-function-return-type": "off", // allow implied
    // TODO: Use fewer any types and re-enable
    "@typescript-eslint/restrict-template-expressions": "off", // Too noisy
    "@typescript-eslint/no-unsafe-member-access": "off", // Too noisy
    "@typescript-eslint/no-unsafe-assignment": "off", // Too noisy
    "@typescript-eslint/no-unsafe-return": "off", // Too noisy
    "@typescript-eslint/no-unsafe-call": "off", // Too noisy
    "import/no-extraneous-dependencies": ["error", {"devDependencies": ["**/__tests__/**"]}],
    "@typescript-eslint/no-explicit-any": "warn",
    "@typescript-eslint/prefer-optional-chain": "warn",
    "@typescript-eslint/no-empty-function": "warn",
    "@typescript-eslint/prefer-as-const": "error",
    "@typescript-eslint/ban-types": "error",
    "@typescript-eslint/no-floating-promises": ["error", {"ignoreIIFE": true}],
    // Copy-pasted from Airbnb so we can disable the ForOfStatement rule
    // https://github.com/airbnb/javascript/blob/aa43bb23987a14baaa795cf795540a3f2eb41872/packages/eslint-config-airbnb-base/rules/style.js#L339
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      // Disabled because this is Node.js (which natively supports iterators/generators without a runtime)
      // {
      //   selector: 'ForOfStatement',
      //   message: 'iterators/generators require regenerator-runtime, which is too heavyweight for this guide to allow them. Separately, loops should be avoided in favor of array iterations.',
      // },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    // handled by @typescript-eslint/no-unused-vars
    "no-unused-vars": "off",
    "@typescript-eslint/no-unused-vars": ["error", {"argsIgnorePattern": "^_"}],
    // handled by @typescript-eslint/no-shadow
    "no-shadow": "off",
    "@typescript-eslint/no-shadow": "error",
    // handled by @typescript-eslint/no-use-before-define
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": "warn",
    // handled by @typescript-eslint/no-useless-constructor
    "no-useless-constructor": "off",
    "@typescript-eslint/no-useless-constructor": "error",
    "@typescript-eslint/array-type": ["error", {"default": "array-simple"}],
    // handled by @typescript-eslint/naming-convention
    "camelcase": "off",
    "@typescript-eslint/naming-convention": [
      "error",
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "variableLike",
        "format": ["camelCase", "UPPER_CASE", "PascalCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "parameter",
        "format": null
      },
      {
        "selector": "property",
        "format": ["camelCase", "PascalCase", "UPPER_CASE", "snake_case"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "format": ["camelCase"],
        "leadingUnderscore": "allow"
      },
      {
        "selector": "memberLike",
        "modifiers": ["private"],
        "format": ["camelCase"],
        "leadingUnderscore": "require"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      {
        "selector": "typeParameter",
        "format": ["PascalCase"]
      },
      {
        "selector": "interface",
        "format": ["PascalCase"],
        "custom": {
          "regex": "^I[A-Z]",
          "match": false
        }
      },
      {
        "selector": "typeAlias",
        "format": ["PascalCase"],
        "custom": {
          "regex": "Type$",
          "match": false
        }
      },
      {
        "selector": "enum",
        "format": ["PascalCase"],
        "custom": {
          "regex": "Enum$",
          "match": false
        }
      },
      {
        "selector": "enumMember",
        "format": ["PascalCase"]
      }
    ],
    "prefer-arrow-callback": ["error", {"allowNamedFunctions": true}],
    "quotes": ["error", "single", {"allowTemplateLiterals": true, "avoidEscape": true}],

    // Stricter than Airbnb
    "constructor-super": "error",
    "prefer-const": "error",
    "no-class-assign": "error",
    "no-this-before-super": "error",
    "no-eq-null": "error",
    "new-cap": "error",
    "arrow-spacing": "error",
    "block-spacing": "error",
    "spaced-comment": "error",
    "prefer-object-spread": "error",
    "no-debugger": "error",
    "no-extra-boolean-cast": "error",
    "no-extra-bind": "error",
    "no-useless-return": "error",
    "yoda": "error",
    "no-lonely-if": "error",
    "no-unneeded-ternary": "error",
    "prefer-spread": "error"
  },
  "env": {
    "node": true,
    "es6": true,
    "jest/globals": true
  }
}
